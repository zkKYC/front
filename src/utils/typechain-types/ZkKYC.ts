/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ZkKYCInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FIELD_SIZE"
      | "ROOT_HISTORY_SIZE"
      | "ZERO_VALUE"
      | "balanceOf"
      | "balanceOfBatch"
      | "burn"
      | "buyName"
      | "commitments"
      | "createCommitment"
      | "currentRootIndex"
      | "filledSubtrees"
      | "getHashKYC"
      | "getLastRoot"
      | "globalNonce"
      | "hashLeftRight"
      | "hasher"
      | "isKnownRoot"
      | "levels"
      | "mint"
      | "name"
      | "nameToAddress"
      | "names"
      | "nextIndex"
      | "offers"
      | "owner"
      | "records"
      | "registerName"
      | "registrationFeePerYear"
      | "removeName"
      | "removeNameFee"
      | "renewName"
      | "roots"
      | "sellName"
      | "setPass"
      | "setRegistrationFeePerYear"
      | "setRemoveNameFee"
      | "setURI"
      | "supportsInterface"
      | "symbol"
      | "transferOwnership"
      | "uri"
      | "withdraw"
      | "zeros"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BuyOffer"
      | "CreateCommitment"
      | "NameRegistered"
      | "NameRenewed"
      | "OwnershipTransferred"
      | "SellOffer"
      | "TransferBatch"
      | "TransferSingle"
      | "URI"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FIELD_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_HISTORY_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ZERO_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyName",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCommitment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRootIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "filledSubtrees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHashKYC",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashLeftRight",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isKnownRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "levels", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nameToAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "names", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "nextIndex", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "records", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "registerName",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationFeePerYear",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "removeName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeNameFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renewName",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "roots", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "sellName",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPass",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistrationFeePerYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRemoveNameFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(functionFragment: "zeros", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "FIELD_SIZE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_HISTORY_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ZERO_VALUE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRootIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "filledSubtrees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHashKYC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashLeftRight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isKnownRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levels", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nameToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "names", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nextIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "records", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationFeePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeNameFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renewName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roots", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPass", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRegistrationFeePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRemoveNameFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zeros", data: BytesLike): Result;
}

export namespace BuyOfferEvent {
  export type InputTuple = [nameHash: BytesLike];
  export type OutputTuple = [nameHash: string];
  export interface OutputObject {
    nameHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreateCommitmentEvent {
  export type InputTuple = [commitment: BytesLike, leafIndex: BigNumberish];
  export type OutputTuple = [commitment: string, leafIndex: bigint];
  export interface OutputObject {
    commitment: string;
    leafIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameRegisteredEvent {
  export type InputTuple = [
    nameHash: BytesLike,
    owner: AddressLike,
    expires: BigNumberish
  ];
  export type OutputTuple = [nameHash: string, owner: string, expires: bigint];
  export interface OutputObject {
    nameHash: string;
    owner: string;
    expires: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NameRenewedEvent {
  export type InputTuple = [nameHash: BytesLike, newExpiry: BigNumberish];
  export type OutputTuple = [nameHash: string, newExpiry: bigint];
  export interface OutputObject {
    nameHash: string;
    newExpiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellOfferEvent {
  export type InputTuple = [
    nameHash: BytesLike,
    price: BigNumberish,
    name: string
  ];
  export type OutputTuple = [nameHash: string, price: bigint, name: string];
  export interface OutputObject {
    nameHash: string;
    price: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZkKYC extends BaseContract {
  connect(runner?: ContractRunner | null): ZkKYC;
  waitForDeployment(): Promise<this>;

  interface: ZkKYCInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FIELD_SIZE: TypedContractMethod<[], [bigint], "view">;

  ROOT_HISTORY_SIZE: TypedContractMethod<[], [bigint], "view">;

  ZERO_VALUE: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [owners: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  burn: TypedContractMethod<
    [from: AddressLike, tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  buyName: TypedContractMethod<[_offerID: BigNumberish], [void], "payable">;

  commitments: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  createCommitment: TypedContractMethod<
    [_commitment: BytesLike],
    [void],
    "nonpayable"
  >;

  currentRootIndex: TypedContractMethod<[], [bigint], "view">;

  filledSubtrees: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getHashKYC: TypedContractMethod<[user: AddressLike], [string], "view">;

  getLastRoot: TypedContractMethod<[], [string], "view">;

  globalNonce: TypedContractMethod<[], [bigint], "view">;

  hashLeftRight: TypedContractMethod<
    [_hasher: AddressLike, _left: BytesLike, _right: BytesLike],
    [string],
    "view"
  >;

  hasher: TypedContractMethod<[], [string], "view">;

  isKnownRoot: TypedContractMethod<[_root: BytesLike], [boolean], "view">;

  levels: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nameToAddress: TypedContractMethod<[name: string], [string], "view">;

  names: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  nextIndex: TypedContractMethod<[], [bigint], "view">;

  offers: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { price: bigint; owner: string }],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  records: TypedContractMethod<
    [arg0: BytesLike],
    [[string, bigint] & { addr: string; expires: bigint }],
    "view"
  >;

  registerName: TypedContractMethod<
    [_name: string, _period: BigNumberish],
    [void],
    "payable"
  >;

  registrationFeePerYear: TypedContractMethod<[], [bigint], "view">;

  removeName: TypedContractMethod<[_name: string], [void], "nonpayable">;

  removeNameFee: TypedContractMethod<[], [bigint], "view">;

  renewName: TypedContractMethod<
    [_name: string, _period: BigNumberish],
    [void],
    "payable"
  >;

  roots: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  sellName: TypedContractMethod<[_price: BigNumberish], [void], "nonpayable">;

  setPass: TypedContractMethod<
    [user: AddressLike, _hashKYC: BytesLike],
    [void],
    "nonpayable"
  >;

  setRegistrationFeePerYear: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRemoveNameFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setURI: TypedContractMethod<
    [tokenId: BigNumberish, tokenURI: string],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uri: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  zeros: TypedContractMethod<[i: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FIELD_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROOT_HISTORY_SIZE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ZERO_VALUE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [owners: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<
    [from: AddressLike, tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyName"
  ): TypedContractMethod<[_offerID: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "commitments"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createCommitment"
  ): TypedContractMethod<[_commitment: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentRootIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "filledSubtrees"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getHashKYC"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getLastRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "globalNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hashLeftRight"
  ): TypedContractMethod<
    [_hasher: AddressLike, _left: BytesLike, _right: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasher"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isKnownRoot"
  ): TypedContractMethod<[_root: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "levels"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nameToAddress"
  ): TypedContractMethod<[name: string], [string], "view">;
  getFunction(
    nameOrSignature: "names"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "nextIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "offers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, string] & { price: bigint; owner: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "records"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[string, bigint] & { addr: string; expires: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerName"
  ): TypedContractMethod<
    [_name: string, _period: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registrationFeePerYear"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeName"
  ): TypedContractMethod<[_name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeNameFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renewName"
  ): TypedContractMethod<
    [_name: string, _period: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "roots"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "sellName"
  ): TypedContractMethod<[_price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPass"
  ): TypedContractMethod<
    [user: AddressLike, _hashKYC: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRegistrationFeePerYear"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRemoveNameFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setURI"
  ): TypedContractMethod<
    [tokenId: BigNumberish, tokenURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "zeros"
  ): TypedContractMethod<[i: BigNumberish], [string], "view">;

  getEvent(
    key: "BuyOffer"
  ): TypedContractEvent<
    BuyOfferEvent.InputTuple,
    BuyOfferEvent.OutputTuple,
    BuyOfferEvent.OutputObject
  >;
  getEvent(
    key: "CreateCommitment"
  ): TypedContractEvent<
    CreateCommitmentEvent.InputTuple,
    CreateCommitmentEvent.OutputTuple,
    CreateCommitmentEvent.OutputObject
  >;
  getEvent(
    key: "NameRegistered"
  ): TypedContractEvent<
    NameRegisteredEvent.InputTuple,
    NameRegisteredEvent.OutputTuple,
    NameRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "NameRenewed"
  ): TypedContractEvent<
    NameRenewedEvent.InputTuple,
    NameRenewedEvent.OutputTuple,
    NameRenewedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SellOffer"
  ): TypedContractEvent<
    SellOfferEvent.InputTuple,
    SellOfferEvent.OutputTuple,
    SellOfferEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;

  filters: {
    "BuyOffer(bytes32)": TypedContractEvent<
      BuyOfferEvent.InputTuple,
      BuyOfferEvent.OutputTuple,
      BuyOfferEvent.OutputObject
    >;
    BuyOffer: TypedContractEvent<
      BuyOfferEvent.InputTuple,
      BuyOfferEvent.OutputTuple,
      BuyOfferEvent.OutputObject
    >;

    "CreateCommitment(bytes32,uint32)": TypedContractEvent<
      CreateCommitmentEvent.InputTuple,
      CreateCommitmentEvent.OutputTuple,
      CreateCommitmentEvent.OutputObject
    >;
    CreateCommitment: TypedContractEvent<
      CreateCommitmentEvent.InputTuple,
      CreateCommitmentEvent.OutputTuple,
      CreateCommitmentEvent.OutputObject
    >;

    "NameRegistered(bytes32,address,uint256)": TypedContractEvent<
      NameRegisteredEvent.InputTuple,
      NameRegisteredEvent.OutputTuple,
      NameRegisteredEvent.OutputObject
    >;
    NameRegistered: TypedContractEvent<
      NameRegisteredEvent.InputTuple,
      NameRegisteredEvent.OutputTuple,
      NameRegisteredEvent.OutputObject
    >;

    "NameRenewed(bytes32,uint256)": TypedContractEvent<
      NameRenewedEvent.InputTuple,
      NameRenewedEvent.OutputTuple,
      NameRenewedEvent.OutputObject
    >;
    NameRenewed: TypedContractEvent<
      NameRenewedEvent.InputTuple,
      NameRenewedEvent.OutputTuple,
      NameRenewedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SellOffer(bytes32,uint256,string)": TypedContractEvent<
      SellOfferEvent.InputTuple,
      SellOfferEvent.OutputTuple,
      SellOfferEvent.OutputObject
    >;
    SellOffer: TypedContractEvent<
      SellOfferEvent.InputTuple,
      SellOfferEvent.OutputTuple,
      SellOfferEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
  };
}
